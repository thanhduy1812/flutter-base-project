import 'package:collection/collection.dart';

enum GtdErrorConstant {
  typeError(-1001, "-1001_TYPE_ERROR", "Type cast error"),
  b2cInternalError(1000, "1000_B2C_INTERNAL_ERROR", "Service NewIBE-B2C Internal Error"),
  invalidRefCode(1001, "1001_INVALID_REF_CODE", "Invalid reference code"),
  canNotCreateVoucher(1002, "1002_CAN_NOT_CREATE_VOUCHER", "Can not create voucher"),
  customerDobInvalid(3101, "3_CUSTOMER_DOB_INVALID", "DOB of Customer invalid"),
  userCusIsDeleted(3012, "3_USER_IS_DELETED", "User is deleted"),
  emailNotExist(4001, "4_EMAIL_NOT_EXIST", "Email address not registered"),
  userNotExist(4002, "4_USER_NOT_EXIST", "User account not exist"),
  permissionDeny(4003, "4_PERMISSION_DENY", "Permission deny"),
  userNotActive(4004, "4_USER_NOT_ACTIVE", "User not active"),
  wrongPassword(4005, "4_WRONG_PASSWORD", "Wrong password"),
  emailExist(4006, "4_EMAIL_EXIST", "Email exist"),
  userExist(4007, "4_USER_EXIST", "User exist"),
  phoneNumberExist(4008, "4_PHONE_NUMBER_EXIST", "Phone number exist"),
  phoneNumberBlank(4009, "4_PHONE_NUMBER_BLANK", "Phone number blank"),
  missingField(4010, "4_MISSING_FIELD", "Missing field"),
  idExist(4011, "4_ID_EXIST", "Id exist"),
  userAgentIsDeleted(4012, "4_USER_IS_DELETED", "User is deleted"),
  bookingInternalError(5000, "5000_BOOKING_INTERNAL_ERROR", "Service NewIBE-Booking Internal Error"),
  bookingEmpty(5001, "5_BOOKING_EMPTY", "Booking Empty - No Info"),
  bookingNumberEmpty(5002, "5_BOOKING_NUMBER_EMPTY", "Booking Number is Empty"),
  bookingNotFound(5003, "5_BOOKING_NOT_FOUND", "Booking is NOT FOUND"),
  bookingCannotChangeStatus(5004, "5_BOOKING_CANNOT_CHANGE_STATUS", "Cannot change Booking Status"),
  bookingUpdateTaxReceiptFail(5005, "5_BOOKING_UPDATE_TAX_RECEIPT_FAIL", "Update Tax Receipt Fail"),
  bookingTicketsrvNotFound(5006, "5_BOOKING_TICKETSRV_NOT_FOUND", "TicketSrv Not Found - Cant get free baggage"),
  bookingGroupbookingNotFound(
      5007, "5_BOOKING_GROUPBOOKING_NOT_FOUND", "GroupBooking Not Found - Cant get free baggage"),
  bookingProcessBookingError(5008, "5_BOOKING_PROCESS_BOOKING_ERROR", "Process booking error..."),
  bookingContentNull(5009, "5_BOOKING_CONTENT_NULL", "Booking Content is NULL..."),
  bookingProcessPending(5010, "5_BOOKING_PROCESS_PENDING", "You only can add traveller to PENDING booking..."),
  bookingParamsNull(5011, "5_BOOKING_PARAMS_NULL", "Input Parameter is NULL ...."),
  payerAuthentication(-6001, "6_PAYER_AUTHENTICATION", "Need to payer authentication"),
  payerCheckEnrollmentError(-6002, "6_PAYER_CHECK_ENROLLMENT_ERROR", "Check Enrollment Error"),
  payerEnrollmentError(-6003, "6_PAYER_AUTHENTICATION", "Check Enrollment Error"),
  paymentError(-6100, "6100_PAYMENT_ERROR", "Can not process payment..."),
  paymentReqError(-6101, "6101_PAYMENT_REQ_ERROR", "Can not create payment request"),
  paymentResError(-6102, "6102_PAYMENT_RES_ERROR", "Can not process payment response"),
  paymentBookingNotFound(6103, "6103_PAYMENT_BOOKING_NOT_FOUND", "Booking Not Found"),
  paymentBookingAlreadyPaid(6104, "6104_PAYMENT_BOOKING_ALREADY_PAID", "Booking already PAID"),
  paymentBookingNotPaid(6105, "6105_PAYMENT_BOOKING_NOT_PAID", "Booking was not PAID"),
  paymentBookingNotBooked(6106, "6106_PAYMENT_BOOKING_NOT_BOOKED", "Booking is not BOOKED status"),
  paymentMomoInvalidSignature(-1000, "-1000_PAYMENT_MOMO_INVALID_SIGNATURE", "Invalid signature in IPN request"),
  paymentMomoConfirmSuccess(0, "0_PAYMENT_MOMO_CONFIRM_SUCCESS", "SUCCESS"),
  paymentMomoErrorCommit(-2000, "-2000_PAYMENT_MOMO_ERROR_COMMIT_TICKET", "Error when commit"),
  momoInvalidPaymentAmount(
      -4000, "-4000_MOMO_INVALID_PAYMENT_AMOUNT", "Amount is invalid, should be between 1,000VND and 20,000,000 VND"),
  paymentB2bBookingError(6107, "6107_PAYMENT_B2B_BOOKING_ERROR", "Can not make payment for B2B booking"),
  paymentAgencyBookingError(6108, "6018_PAYMENT_AGENCY_BOOKING_ERROR", "Can not make payment for other Agency"),
  voidError(-6109, "6109_VOID_ERROR", "Can not process payment..."),
  voidReqError(-6110, "6110_VOID_REQ_ERROR", "Can not create payment request"),
  voidResError(-6111, "6111_VOID_RES_ERROR", "Can not process payment response"),
  voidAlreadyVoidedError(-6112, "6112_VOID_ALREADY_VOIDED_ERROR", "Already voided payment"),
  subscriptionError(-6150, "6_SUBSCRIPTION_ERROR", "Can not process subscription "),
  subscriptionReqError(-6151, "6_SUBSCRIPTION_ERROR", "Can not create subscription request"),
  subscriptionResError(-6152, "6_SUBSCRIPTION_ERROR", "Can not process subscription response"),
  agentAccountNotExist(-6200, "6_AGENT_ACCOUNT_NOT_EXIST", "Agent account does not exist."),
  amountIncorrect(-6201, "6_AMOUNT_INCORRECT", "Amount value need to be positive (>0)."),
  topupTransTypeIncorrect(-6202, "6_TOPUP_TRANS_TYPE_INCORRECT", "Topup Transaction type is incorect"),
  topupCannotPerformTrans(-6203, "6_TOPUP_CANNOT_PERFORM_TRANS", "Can not perform Topup transaction."),
  topupBalanceNotMatch(-6204, "6_TOPUP_BALANCE_NOT_MATCH", "AgentAccount balance is not lastest data"),
  paymentBalBookerCodeWrongFomart(-6210, "6_PAYMENT_BAL_BOOKER_CODE_WRONG_FOMART", "Booker code wrong format."),
  paymentBalPurchasingPowerIncorrect(-6211, "6_PAYMENT_BAL_PURCHASING_POWER_INCORRECT", "Purchaing Power is incorrect"),
  voucherValidationError(7200, "7200_VOUCHER_VALIDATION_ERROR", "Voucher validation error."),
  voucherRedemptionError(7201, "7201_VOUCHER_REDEMPTION_ERROR", "Voucher redemption error."),
  voucherNotActiveYet(7202, "7202_VOUCHER_NOT_ACTIVE_YET", "Voucher not active yet."),
  voucherNotFound(7203, "7203_VOUCHER_NOT_FOUND", "Voucher not found."),
  voucherExpired(7204, "7204_VOUCHER_EXPIRED", "Voucher expired."),
  voucherDisable(7205, "7205_VOUCHER_DISABLE", "Voucher is disabled."),
  voucherGiftAmountExceeded(7206, "7206_VOUCHER_GIFT_AMOUNT_EXCEEDED", "Voucher gift amount exceeded."),
  voucherNotValid(7207, "7207_VOUCHER_NOT_VALID", "Voucher is not valid."),
  voucherOnlyOneway(7208, "7208_VOUCHER_ONLY_ONEWAY", "Voucher only use for oneway."),
  voucherOnlyRoundtrip(7209, "7209_VOUCHER_ONLY_ROUNDTRIP", "Voucher only use for roundtrip."),
  voucherOnlyHotel(7210, "7210_VOUCHER_ONLY_HOTEL", "Voucher only use for hotel."),
  voucherCampaignNotfound(7211, "7211_VOUCHER_CAMPAIGN_NOTFOUND", "Campaign not found."),
  voucherCampaignError(7212, "7212_VOUCHER_CAMPAIGN_ERROR", "Get campaign error."),
  voucherQuantityExceeded(7213, "7213_VOUCHER_QUANTITY_EXCEEDED", "Voucher quantity exceeded."),
  voucherNotEnoughMinAmount(7214, "7214_VOUCHER_NOT_ENOUGH_MIN_AMOUNT", "Voucher not enough min amount."),
  voucherNotEnoughMaxAmount(7215, "7215_VOUCHER_NOT_ENOUGH_MAX_AMOUNT", "Voucher not enough max amount."),
  voucherOnlyCombo(7216, "7216_VOUCHER_ONLY_COMBO", "Voucher only use for combo."),
  voucherNotValidIgnoreDays(7217, "7217_VOUCHER_NOT_VALID_IGNORE_DAYS", "Voucher is not valid on ignore days"),
  voucherOnlyKrespano(7218, "7218_VOUCHER_ONLY_KREspanO", "Voucher is only for payment by KREspanO"),
  refCodeNotFound(-7001, "7_REF_CODE_NOT_FOUND", "Reference Code Not Found"),
  refCodeExpired(-7002, "7_REF_CODE_EXPIRED", "Reference Code Exipred"),
  parameterIsNull(8001, "8_PARAMETER_IS_NULL", "Parameter is NULL"),
  ticketEmpty(8101, "8_BOOKING_EMPTY", "Booking Empty - No Ticket Info"),
  bookingTicketNotFound(8102, "8_BOOKING_NOT_FOUND", "Booking Not Found"),
  bookingTransactionNotFound(8103, "8_BOOKING_TRANS_NOT_FOUND", "Booking Transaction Not Found"),
  bookingMultiStatus(8104, "8_BOOKING_MULTI_STATUS", "Booking Has Multi-Status"),
  buildBookingObjErr(8105, "8_BUILD_BOOKING_OBJ_ERR", "Build Booking Object Error"),
  ticketNotFound(8106, "8_TICKET_NOT_FOUND", "Cannot find Ticket information"),
  ticketInvalid(8107, "8_TICKET_INVALID", "Booking Ticket is invalid"),
  travellerDobInvalid(8108, "8_TRAVELLER_DOB_INVALID", "DOB of Traveller invalid"),
  apiProviderHoldTicketError(8200, "8_API_PROspanER_BOOK_TICKET_ERROR", "System Exception when holding a ticket"),
  apiProviderIssueTicketError(8201, "8_API_PROspanER_ISSUE_TICKET_ERROR", "System Exception when issuing a ticket"),
  hotelEmpty(9101, "9_BOOKING_EMPTY", "Booking Empty - No Ticket Info"),
  bookingHotelNotFound(9102, "9_BOOKING_NOT_FOUND", "Booking Not Found"),
  hotelTransactionNotFound(9103, "9_BOOKING_TRANS_NOT_FOUND", "Booking Transaction Not Found"),
  hotelMultiStatus(9104, "9_BOOKING_MULTI_STATUS", "Booking Has Multi-Status"),
  buildBookingHotelObjErr(9105, "9_BUILD_BOOKING_OBJ_ERR", "Build Booking Object Error"),
  hotelNotFound(9106, "9_HOTEL_NOT_FOUND", "Cannot find Hotel information"),
  productNotFound(9107, "9_PRODUCT_NOT_FOUND", "Cannot find Room information"),
  lockRoomError(9108, "9_LOCK_ROOM_ERROR", "Cannot Lock Room"),
  cacheGroupBookingNotFound(9109, "9109_CACHE_GROUP_BOOKING_NOT_FOUND", "Cannot find cache group booking"),
  buildDraftBookingTransError(9110, "9110_BUILD_DRAFT_BOOKING_TRANS_ERROR", "Build draft booking transaction error"),
  buildDraftBookingTransMarkupError(
      9111, "9111_BUILD_DRAFT_BOOKING_TRANS_MARKUP_ERROR", "Build draft booking transaction markup error"),
  buildDraftBookingContentError(9112, "9112_BUILD_DRAFT_BOOKING_CONTENT_ERROR", "Build draft booking content error"),
  saveBookingTravelerError(9113, "9113_SAVE_BOOKING_TRAVELER_ERROR", "Save booking traveler error"),
  bookingPaymentStatusNotSucceeded(
      9114, "9114_BOOKING_PAYMENT_STATUS_NOT_SUCCEEDED", "Booking payment status is not succeeded"),
  bookingStatusIllegal(9115, "9115_BOOKING_STATUS_ILLEGAL", "Booking status is illegal"),
  apiProviderHoldHotelError(9200, "9_API_PROVIDER_HOLD_HOTEL_ERROR", "System Exception when holding a Hotel"),
  apiProviderIssueHotelError(9201, "9_API_PROVIDER_ISSUE_HOTEL_ERROR", "System Exception when issuing a Hotel"),
  activityBookingEmpty(12101, "12_BOOKING_EMPTY", "Booking Empty - No Ticket Info"),
  activityBookingNotFound(12102, "12_BOOKING_NOT_FOUND", "Booking Not Found"),
  activityBookingTransactionNotFound(12103, "12_BOOKING_TRANS_NOT_FOUND", "Booking Transaction Not Found"),
  activityBookingMultiStatus(12104, "12_BOOKING_MULTI_STATUS", "Booking Has Multi-Status"),
  activityBuildBookingObjErr(12105, "12_BUILD_BOOKING_OBJ_ERR", "Build Booking Object Error"),
  activityNotFound(12106, "12_ACTIVITY_NOT_FOUND", "Cannot find Activity information"),
  activityProductNotFound(12107, "12_PRODUCT_NOT_FOUND", "Cannot find Product information"),
  activityCacheGroupBookingNotFound(12109, "12109_CACHE_GROUP_BOOKING_NOT_FOUND", "Cannot find cache group booking"),
  activityBuildDraftBookingTransError(
      12110, "12110_BUILD_DRAFT_BOOKING_TRANS_ERROR", "Build draft booking transaction error"),
  activityBuildDraftBookingTransMarkupError(
      12111, "12111_BUILD_DRAFT_BOOKING_TRANS_MARKUP_ERROR", "Build draft booking transaction markup error"),
  activityBuildDraftBookingContentError(
      12112, "12112_BUILD_DRAFT_BOOKING_CONTENT_ERROR", "Build draft booking content error"),
  activitySaveBookingTravelerError(12113, "12113_SAVE_BOOKING_TRAVELER_ERROR", "Save booking traveler error"),
  activityBookingPaymentStatusNotSucceeded(
      12114, "12114_BOOKING_PAYMENT_STATUS_NOT_SUCCEEDED", "Booking payment status is not succeeded"),
  activityBookingStatusIllegal(12115, "9115_BOOKING_STATUS_ILLEGAL", "Booking status is illegal"),

  insuranceFlexiFailed(14001, "FLEXI_INSURANCE_FAILED", "Đăng ký bảo hiểm du lịch không thành công! Vui lòng liên hệ bộ phận CSKH Gotadi.com 1900-9002 để được hỗ trợ."),
  unknown(-1, "unknown", "Đã có lỗi xảy ra, vui lòng thử lại");

  final int id;
  final String code;
  final String message;
  const GtdErrorConstant(this.id, this.code, this.message);

  static GtdErrorConstant findByCode({String? id, String? code}) {
    GtdErrorConstant? error = GtdErrorConstant.values
        .where((element) => "${element.id}" == id || element.code.toLowerCase() == code?.toLowerCase())
        .firstOrNull;
    return error ?? GtdErrorConstant.unknown;
  }
}
